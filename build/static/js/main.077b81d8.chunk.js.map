{"version":3,"sources":["microphone.tsx","file-upload.tsx","audiostreamer.ts","audiobucket.ts","model-loader.tsx","recognizer.tsx","index.tsx"],"names":["micStream","audioStreamer","StyledButton","styled","Button","FileUpload","recognizer","ready","loading","audioRef","useRef","onChange","file","current","fileUrl","URL","createObjectURL","originFileObj","audioPlayer","src","audioContext","AudioContext","recognizerNode","createScriptProcessor","onaudioprocess","event","currentTime","duration","paused","acceptWaveform","inputBuffer","error","console","createMediaElementSource","connect","customRequest","onSuccess","accept","showUploadList","icon","UploadOutlined","disabled","ref","autoPlay","AudioStreamer","options","chunk","encoding","callback","buffer","getChannelData","this","byteLength","Duplex","audioBucket","Writable","write","objectMode","decodeStrings","Microphone","useState","muted","setMuted","startRecognitionStream","useCallback","a","mediaStream","navigator","mediaDevices","getUserMedia","video","audio","echoCancellation","noiseSuppression","MicrophoneStream","bufferSize","setStream","unpipe","pipe","useEffect","AudioMutedOutlined","AudioOutlined","onMouseUp","Option","Select","Wrapper","div","models","name","path","ModelLoader","onModelChange","onModelSelect","model","setModel","style","height","margin","width","defaultValue","value","map","index","onClick","Header","ResultContainer","Word","span","confidence","color","Math","max","Recognizer","Map","utterances","setUtterances","partial","setPartial","loadedModel","setLoadedModel","setRecognizer","setLoading","setReady","loadModel","terminate","createModel","process","KaldiRecognizer","on","message","result","utt","uindex","word","windex","conf","title","toFixed","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"qNAeIA,EACAC,E,sKCVEC,EAAeC,YAAOC,IAAPD,CAAH,+EAiEHE,EAtDoC,SAAC,GAI7C,IAHLC,EAGI,EAHJA,WACAC,EAEI,EAFJA,MACAC,EACI,EADJA,QAEMC,EAAWC,iBAAyB,MAgC1C,OACE,qCACE,cAAC,IAAD,CACEC,SAjCW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAClB,GAAIN,GAAcG,EAASI,QAAS,CAClC,IAAMC,EAAUC,IAAIC,gBAAgBJ,EAAKK,eACnCC,EAAcT,EAASI,QAC7BK,EAAYC,IAAML,EAElB,IAAMM,EAAe,IAAIC,aAEnBC,EAAiBF,EAAaG,sBAAsB,KAAM,EAAG,GACnED,EAAeE,eAAiB,SAACC,GAC/B,IAEIP,EAAYQ,YAAcR,EAAYS,WACrCT,EAAYU,QAEbtB,EAAWuB,eAAeJ,EAAMK,aAElC,MAAOC,GACPC,QAAQD,MAAM,wBAAyBA,KAGvBX,EAAaa,yBAAyBf,GAC9CgB,QAAQZ,KAYlBa,cARe,SAAC,GAA6B,EAA3BvB,MACtBwB,EADiD,EAArBA,WAClB,OAQNC,OAAO,UACPC,gBAAgB,EAJlB,SAME,cAACpC,EAAD,CAAcqC,KAAM,cAACC,EAAA,EAAD,IAAoBC,UAAWlC,GAASC,EAA5D,2BAIF,uBAAOkC,IAAKjC,EAAUkC,UAAQ,Q,gFC/DvBC,EAAb,kDACE,WAAmBtC,EAA6BuC,GAA0B,IAAD,8BACvE,cAAMA,IADWvC,aAAsD,EAD3E,0CAKE,SAAcwC,EAAoBC,EAAeC,GAC/C,IAAMC,EAASH,EAAMI,eAAe,GAChCC,KAAK7C,YAAc2C,EAAOG,WAAa,GACzCD,KAAK7C,WAAWuB,eAAeiB,GAEjCE,QAVJ,GAAmCK,UCDtBC,EAAc,IAAIC,WAAS,CACtCC,MAAO,SAAUV,EAAOC,EAAUC,GAChCA,KAEFS,YAAY,EACZC,eAAe,IHsFFC,EA3EoC,SAAC,GAI7C,IAHLrD,EAGI,EAHJA,WACAE,EAEI,EAFJA,QACAD,EACI,EADJA,MACI,EACsBqD,oBAAS,GAD/B,mBACGC,EADH,KACUC,EADV,KAGEC,EAAyBC,sBAAW,sBAAC,4BAAAC,EAAA,0DACrC3D,EADqC,oBAEvCwD,GAAS,GAEJ9D,EAJkC,wBAKjCkE,EAAc,KALmB,kBAOfC,UAAUC,aAAaC,aAAa,CACtDC,OAAO,EACPC,MAAO,CACLC,kBAAkB,EAClBC,kBAAkB,KAXa,OAOnCP,EAPmC,QAenClE,EAAY,IAAI0E,IAAiB,CAC/BjB,YAAY,EACZkB,WAAY,QAGJC,UAAUV,GApBe,kDAsBnClC,QAAQD,MAAR,MAtBmC,gCAyBrC/B,EAAU6E,OAAO5E,GACjBD,EAAU8E,KAAKxB,GA1BsB,QA6BvCrD,EAAgB,IAAI2C,EAActC,EAAY,CAC5CmD,YAAY,IA9ByB,0DAiCxC,CAACnD,IAEJyE,qBAAU,WACRhB,MACC,CAACzD,IAEJyE,qBAAU,WACRjB,GAAS,KACR,CAACtD,IAEJuE,qBAAU,WAIA,IAAD,IAHK,IAAPlB,GAIM,QAAT,EAAA7D,SAAA,SAAW6E,OAAO5E,GACT,QAAT,EAAAD,SAAA,SAAW8E,KAAKxB,KAJP,QAAT,EAAAtD,SAAA,SAAW6E,OAAOvB,GACT,QAAT,EAAAtD,SAAA,SAAW8E,KAAK7E,MAKjB,CAAC4D,IAMJ,OACE,cAAC,IAAD,CACEtB,KAAMsB,EAAQ,cAACmB,EAAA,EAAD,IAAyB,cAACC,EAAA,EAAD,IACvCxC,UAAWlC,GAASC,EACpB0E,UARc,WAChBpB,GAAS,SAACD,GAAD,OAAYA,MAIrB,oB,SI/EIsB,EAAWC,IAAXD,OAEFE,EAAUlF,IAAOmF,IAAV,0EAKPpF,EAAeC,YAAOC,IAAPD,CAAH,+EAULoF,EAAgD,CAC3D,CACEC,KAAM,aACNC,KAAM,uBAER,CACED,KAAM,iBACNC,KAAM,sCAsCKC,EAlCqC,SAAC,GAI9C,IAHLC,EAGI,EAHJA,cACAC,EAEI,EAFJA,cACApF,EACI,EADJA,QACI,EACsBoD,mBAAS2B,EAAO,GAAGE,MADzC,mBACGI,EADH,KACUC,EADV,KAGJ,OACE,eAACT,EAAD,WACE,cAAC,IAAD,CACEU,MAAO,CACLC,OAAQ,OACRC,OAAQ,SACRC,MAAO,SAETC,aAAcZ,EAAO,GAAGE,KACxB9E,SAAU,SAACyF,GACTT,EAAcS,GACdN,EAASM,IATb,SAYGb,EAAOc,KAAI,SAACR,EAAOS,GAAR,OACV,cAACnB,EAAD,CAAQiB,MAAOP,EAAMJ,KAArB,SACGI,EAAML,MADuBc,QAKpC,cAAC,EAAD,CAAcC,QAAS,kBAAMX,EAAcC,IAA3C,SACGrF,EAAU,aAAe,aCnD5B6E,EAAUlF,IAAOmF,IAAV,+KAUPkB,EAASrG,IAAOmF,IAAV,gGAWNmB,GALetG,YAAOC,IAAPD,CAAH,+EAKMA,IAAOmF,IAAV,2KAUfoB,EAAOvG,IAAOwG,KAAV,mEACC,YAAqB,IAAlBC,EAAiB,EAAjBA,WACJC,EAAQC,KAAKC,IAAI,KAAO,EAAIH,GAAc,GAAI,GACpD,MAAM,OAAN,OAAcC,EAAd,YAAuBA,EAAvB,YAAgCA,EAAhC,QAiBSG,IAFI,IAAIC,IAE8B,WAAO,IAAD,EACnBrD,mBAAuB,IADJ,mBAChDsD,EADgD,KACpCC,EADoC,OAEzBvD,mBAAS,IAFgB,mBAEhDwD,EAFgD,KAEvCC,EAFuC,OAGjBzD,qBAHiB,mBAGhD0D,EAHgD,KAGnCC,EAHmC,OAOnB3D,qBAPmB,mBAOhDtD,EAPgD,KAOpCkH,EAPoC,OAQzB5D,oBAAS,GARgB,mBAQhDpD,EARgD,KAQvCiH,EARuC,OAS7B7D,oBAAS,GAToB,mBAShDrD,EATgD,KASzCmH,EATyC,KAWjDC,EAAS,uCAAG,WAAOlC,GAAP,iBAAAxB,EAAA,6DAChBwD,GAAW,GACA,OAAXH,QAAW,IAAXA,KAAazB,MAAM+B,YAFH,SAIIC,sBAAYC,sBAAsCrC,GAJtD,OAIVI,EAJU,OAMhB0B,EAAe,CAAE1B,QAAOJ,UAClBnF,EAAa,IAAIuF,EAAMkC,iBAClBC,GAAG,UAAU,SAACC,GACvB,IAAMC,EAAqBD,EAAQC,OACnCf,GAAc,SAACgB,GAAD,4BAA2BA,GAA3B,CAAgCD,UAGhD5H,EAAW0H,GAAG,iBAAiB,SAACC,GAC9BZ,EAAWY,EAAQC,OAAOd,YAG5BI,GAAc,WAGZ,OAFAC,GAAW,GACXC,GAAS,GACFpH,KApBO,4CAAH,sDAwBf,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEqF,cAAe,SAACF,GAAD,OAAUiC,GAAoB,OAAXJ,QAAW,IAAXA,OAAA,EAAAA,EAAa7B,QAASA,IACxDG,cAAe,SAACH,IACC,OAAX6B,QAAW,IAAXA,OAAA,EAAAA,EAAa7B,QAASA,GACxBkC,EAAUlC,IAGdjF,QAASA,IAEX,eAACgG,EAAD,WACE,cAAC,EAAD,CAAYlG,WAAYA,EAAYE,QAASA,EAASD,MAAOA,IAC7D,cAAC,EAAD,CAAYD,WAAYA,EAAYE,QAASA,EAASD,MAAOA,OAE/D,eAACkG,EAAD,WACGS,EAAWb,KAAI,SAAC8B,EAAKC,GAAN,oBACdD,QADc,IACdA,GADc,UACdA,EAAKD,cADS,aACd,EAAa7B,KAAI,SAACgC,EAAMC,GAAP,OACf,eAAC5B,EAAD,CAEEE,WAAYyB,EAAKE,KACjBC,MAAK,uBAA8B,IAAZH,EAAKE,MAAYE,QAAQ,GAA3C,KAHP,UAKGJ,EAAKA,KAAM,MALd,UACUD,EADV,YACoBE,UAQxB,+BAAqBlB,GAAX,mBChHZ/B,GAAUlF,IAAOmF,IAAV,gGAMboD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,GAAD,WACE,4CACA,4FACA,mGACoE,uBADpE,8DAIA,cAAC,GAAD,IACA,4BACE,mBAAGC,KAAK,IAAR,qDAONC,SAASC,eAAe,W","file":"static/js/main.077b81d8.chunk.js","sourcesContent":["import { Button } from \"antd\";\nimport { AudioMutedOutlined, AudioOutlined } from \"@ant-design/icons\";\nimport MicrophoneStream from \"microphone-stream\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { AudioStreamer } from \"./audiostreamer\";\nimport { audioBucket } from \"./audiobucket\";\nimport { KaldiRecognizer } from \"vosk-browser\";\n\ninterface Props {\n  recognizer: KaldiRecognizer | undefined;\n  ready: boolean;\n  loading: boolean;\n}\n\nlet micStream: any;\nlet audioStreamer: AudioStreamer;\n\nconst Microphone: React.FunctionComponent<Props> = ({\n  recognizer,\n  loading,\n  ready,\n}) => {\n  const [muted, setMuted] = useState(true);\n\n  const startRecognitionStream = useCallback(async () => {\n    if (recognizer) {\n      setMuted(true);\n\n      if (!micStream) {\n        let mediaStream = null;\n        try {\n          mediaStream = await navigator.mediaDevices.getUserMedia({\n            video: false,\n            audio: {\n              echoCancellation: true,\n              noiseSuppression: true,\n            },\n          });\n\n          micStream = new MicrophoneStream({\n            objectMode: true,\n            bufferSize: 1024,\n          });\n\n          micStream.setStream(mediaStream);\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        micStream.unpipe(audioStreamer);\n        micStream.pipe(audioBucket);\n      }\n\n      audioStreamer = new AudioStreamer(recognizer, {\n        objectMode: true,\n      });\n    }\n  }, [recognizer]);\n\n  useEffect(() => {\n    startRecognitionStream();\n  }, [recognizer]);\n\n  useEffect(() => {\n    setMuted(true);\n  }, [loading]);\n\n  useEffect(() => {\n    if (!muted) {\n      micStream?.unpipe(audioBucket);\n      micStream?.pipe(audioStreamer);\n    } else {\n      micStream?.unpipe(audioStreamer);\n      micStream?.pipe(audioBucket);\n    }\n  }, [muted]);\n\n  const toggleMic = () => {\n    setMuted((muted) => !muted);\n  };\n\n  return (\n    <Button\n      icon={muted ? <AudioMutedOutlined /> : <AudioOutlined />}\n      disabled={!ready || loading}\n      onMouseUp={toggleMic}\n    >\n      Speak\n    </Button>\n  );\n};\n\nexport default Microphone;\n","import React, { useRef } from \"react\";\nimport { Button, Upload } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport { KaldiRecognizer } from \"vosk-browser\";\n\nconst StyledButton = styled(Button)`\n  box-sizing: border-box;\n  margin-left: 0.5rem;\n`;\n\ninterface Props {\n  recognizer: KaldiRecognizer | undefined;\n  ready: boolean;\n  loading: boolean;\n}\n\nconst FileUpload: React.FunctionComponent<Props> = ({\n  recognizer,\n  ready,\n  loading,\n}) => {\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  const onChange = ({ file }: any) => {\n    if (recognizer && audioRef.current) {\n      const fileUrl = URL.createObjectURL(file.originFileObj);\n      const audioPlayer = audioRef.current;\n      audioPlayer.src = fileUrl;\n\n      const audioContext = new AudioContext();\n\n      const recognizerNode = audioContext.createScriptProcessor(4096, 1, 1);\n      recognizerNode.onaudioprocess = (event) => {\n        try {\n          if (\n            audioPlayer.currentTime < audioPlayer.duration &&\n            !audioPlayer.paused\n          ) {\n            recognizer.acceptWaveform(event.inputBuffer);\n          }\n        } catch (error) {\n          console.error(\"acceptWaveform failed\", error);\n        }\n      };\n      const audioSource = audioContext.createMediaElementSource(audioPlayer);\n      audioSource.connect(recognizerNode);\n    }\n  };\n\n  const dummyRequest = ({ file, onSuccess }: any) => {\n    onSuccess(\"ok\");\n  };\n\n  return (\n    <>\n      <Upload\n        onChange={onChange}\n        customRequest={dummyRequest}\n        accept=\"audio/*\"\n        showUploadList={false}\n      >\n        <StyledButton icon={<UploadOutlined />} disabled={!ready || loading}>\n          Upload File\n        </StyledButton>\n      </Upload>\n      <audio ref={audioRef} autoPlay></audio>\n    </>\n  );\n};\n\nexport default FileUpload;\n","import { Duplex, DuplexOptions } from \"readable-stream\";\nimport { KaldiRecognizer } from \"vosk-browser\";\n\nexport class AudioStreamer extends Duplex {\n  constructor(public recognizer: KaldiRecognizer, options?: DuplexOptions) {\n    super(options);\n  }\n\n  public _write(chunk: AudioBuffer, encoding: any, callback: any) {\n    const buffer = chunk.getChannelData(0);\n    if (this.recognizer && buffer.byteLength > 0) {\n      this.recognizer.acceptWaveform(chunk);\n    }\n    callback();\n  }\n}\n","import { Writable } from \"readable-stream\";\n\nexport const audioBucket = new Writable({\n  write: function (chunk, encoding, callback) {\n    callback();\n  },\n  objectMode: true,\n  decodeStrings: false,\n});\n","import { Button, Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst { Option } = Select;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst StyledButton = styled(Button)`\n  box-sizing: border-box;\n  margin-left: 0.5rem;\n`;\ninterface Props {\n  onModelChange: (value: string) => void;\n  onModelSelect: (value: string) => void;\n  loading: boolean;\n}\n\nexport const models: Array<{ name: string; path: string }> = [\n  {\n    name: \"Bangla ASR\",\n    path: \"bangla_model.tar.gz\",\n  },\n  {\n    name: \"Indian English\",\n    path: \"vosk-model-small-en-in-0.4.tar.gz\",\n  }\n];\n\nconst ModelLoader: React.FunctionComponent<Props> = ({\n  onModelChange,\n  onModelSelect,\n  loading,\n}) => {\n  const [model, setModel] = useState(models[0].path);\n\n  return (\n    <Wrapper>\n      <Select\n        style={{\n          height: \"2rem\",\n          margin: \"auto 0\",\n          width: \"10rem\",\n        }}\n        defaultValue={models[0].path}\n        onChange={(value: string) => {\n          onModelChange(value);\n          setModel(value);\n        }}\n      >\n        {models.map((model, index) => (\n          <Option value={model.path} key={index}>\n            {model.name}\n          </Option>\n        ))}\n      </Select>\n      <StyledButton onClick={() => onModelSelect(model)}>\n        {loading ? \"Loading...\" : \"Load\"}\n      </StyledButton>\n    </Wrapper>\n  );\n};\n\nexport default ModelLoader;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Select } from \"antd\";\nimport { createModel, KaldiRecognizer, Model } from \"vosk-browser\";\nimport FileUpload from \"./file-upload\";\nimport Microphone from \"./microphone\";\nimport ModelLoader from \"./model-loader\";\n\n\nconst Wrapper = styled.div`\n  width: 80%;\n  text-align: left;\n  max-width: 700px;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 1rem auto;\n`;\n\nconst StyledButton = styled(Button)`\n  box-sizing: border-box;\n  margin-left: 0.5rem;\n`;\n\nconst ResultContainer = styled.div`\n  width: 100%;\n  height: 40%;\n  margin: 1rem auto;\n  border: 1px solid #aaaaaa;\n  padding: 1rem;\n  resize: vertical;\n  overflow: auto;\n`;\n\nconst Word = styled.span<{ confidence: number }>`\n  color: ${({ confidence }) => {\n    const color = Math.max(255 * (1 - confidence) - 20, 0);\n    return `rgb(${color},${color},${color})`;\n  }};\n  white-space: normal;\n`;\n\ninterface VoskResult {\n  result: Array<{\n    conf: number;\n    start: number;\n    end: number;\n    word: string;\n  }>;\n  text: string;\n}\n\nconst modelMap = new Map<string, { model: Model; path: string }>();\n\nexport const Recognizer: React.FunctionComponent = () => {\n  const [utterances, setUtterances] = useState<VoskResult[]>([]);\n  const [partial, setPartial] = useState(\"\");\n  const [loadedModel, setLoadedModel] = useState<{\n    model: Model;\n    path: string;\n  }>();\n  const [recognizer, setRecognizer] = useState<KaldiRecognizer>();\n  const [loading, setLoading] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const loadModel = async (path: string) => {\n    setLoading(true);\n    loadedModel?.model.terminate();\n\n    const model = await createModel(process.env.PUBLIC_URL + \"/models/\" + path);\n\n    setLoadedModel({ model, path });\n    const recognizer = new model.KaldiRecognizer();\n    recognizer.on(\"result\", (message: any) => {\n      const result: VoskResult = message.result;\n      setUtterances((utt: VoskResult[]) => [...utt, result]);\n    });\n\n    recognizer.on(\"partialresult\", (message: any) => {\n      setPartial(message.result.partial);\n    });\n\n    setRecognizer(() => {\n      setLoading(false);\n      setReady(true);\n      return recognizer;\n    });\n  };\n\n  return (\n    <Wrapper>\n      <ModelLoader\n        onModelChange={(path) => setReady(loadedModel?.path === path)}\n        onModelSelect={(path) => {\n          if (loadedModel?.path !== path) {\n            loadModel(path);\n          }\n        }}\n        loading={loading}\n      />\n      <Header>\n        <Microphone recognizer={recognizer} loading={loading} ready={ready} />\n        <FileUpload recognizer={recognizer} loading={loading} ready={ready} />\n      </Header>\n      <ResultContainer>\n        {utterances.map((utt, uindex) =>\n          utt?.result?.map((word, windex) => (\n            <Word\n              key={`${uindex}-${windex}`}\n              confidence={word.conf}\n              title={`Confidence: ${(word.conf * 100).toFixed(2)}%`}\n            >\n              {word.word}{\" \"}\n            </Word>\n          ))\n        )}\n        <span key=\"partial\">{partial}</span>\n      </ResultContainer>\n      \n    </Wrapper>\n  );\n};\n","import \"antd/dist/antd.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\n\nimport \"./index.css\";\n\nimport { Recognizer } from \"./recognizer\";\n\nconst Wrapper = styled.div`\n  text-align: center;\n  margin: auto;\n  justify-content: center;\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper>\n      <h1>ASR BANGLA</h1>\n      <h1>An Automatic Speech Recognition System for Bangla Language</h1>\n      <p>\n        Select a language and load the model to start speech recognition. <br />\n        You can either upload a file or speak on the microphone.\n      </p>\n      <Recognizer />\n      <p>\n        <a href=\"#\">\n          ASR BANGLA @ Md Rezowan Talukder\n\n        </a>\n      </p>\n    </Wrapper>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}