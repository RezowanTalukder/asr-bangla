{"version":3,"sources":["microphone.tsx","audiostreamer.ts","audiobucket.ts","model-loader.tsx","recognizer.tsx","index.tsx"],"names":["micStream","audioStreamer","AudioStreamer","recognizer","options","chunk","encoding","callback","buffer","getChannelData","this","byteLength","acceptWaveform","Duplex","audioBucket","Writable","write","objectMode","decodeStrings","Microphone","loading","ready","useState","muted","setMuted","startRecognitionStream","useCallback","a","mediaStream","navigator","mediaDevices","getUserMedia","video","audio","echoCancellation","noiseSuppression","MicrophoneStream","bufferSize","setStream","console","error","unpipe","pipe","useEffect","icon","AudioMutedOutlined","AudioOutlined","disabled","onMouseUp","type","shape","size","Option","Select","Wrapper","styled","div","StyledButton","Button","models","name","path","ModelLoader","onModelChange","onModelSelect","loaded","model","setModel","style","height","margin","width","defaultValue","onChange","value","map","index","onClick","Header","ResultContainer","Word","span","confidence","color","Math","max","Recognizer","Map","utterances","setUtterances","partial","setPartial","loadedModel","setLoadedModel","setRecognizer","setLoading","setReady","loadModel","terminate","createModel","process","KaldiRecognizer","on","message","result","utt","uindex","word","windex","conf","title","toFixed","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"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","file":"static/js/main.c73a6bc5.chunk.js","sourcesContent":["import { Button } from \"antd\";\nimport { AudioMutedOutlined, AudioOutlined } from \"@ant-design/icons\";\nimport MicrophoneStream from \"microphone-stream\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { AudioStreamer } from \"./audiostreamer\";\nimport { audioBucket } from \"./audiobucket\";\nimport { KaldiRecognizer } from \"vosk-browser\";\n\ninterface Props {\n  recognizer: KaldiRecognizer | undefined;\n  ready: boolean;\n  loading: boolean;\n}\n\nlet micStream: any;\nlet audioStreamer: AudioStreamer;\n\nconst Microphone: React.FunctionComponent<Props> = ({\n  recognizer,\n  loading,\n  ready,\n}) => {\n  const [muted, setMuted] = useState(true);\n\n  const startRecognitionStream = useCallback(async () => {\n    if (recognizer) {\n      setMuted(true);\n\n      if (!micStream) {\n        let mediaStream = null;\n        try {\n          mediaStream = await navigator.mediaDevices.getUserMedia({\n            video: false,\n            audio: {\n              echoCancellation: true,\n              noiseSuppression: true,\n            },\n          });\n\n          micStream = new MicrophoneStream({\n            objectMode: true,\n            bufferSize: 1024,\n          });\n\n          micStream.setStream(mediaStream);\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        micStream.unpipe(audioStreamer);\n        micStream.pipe(audioBucket);\n      }\n\n      audioStreamer = new AudioStreamer(recognizer, {\n        objectMode: true,\n      });\n    }\n  }, [recognizer]);\n\n  useEffect(() => {\n    startRecognitionStream();\n  }, [recognizer]);\n\n  useEffect(() => {\n    setMuted(true);\n  }, [loading]);\n\n  useEffect(() => {\n    if (!muted) {\n      micStream?.unpipe(audioBucket);\n      micStream?.pipe(audioStreamer);\n    } else {\n      micStream?.unpipe(audioStreamer);\n      micStream?.pipe(audioBucket);\n    }\n  }, [muted]);\n\n  const toggleMic = () => {\n    setMuted((muted) => !muted);\n  };\n\n  return (\n    <Button\n      icon={muted ? <AudioMutedOutlined /> : <AudioOutlined />}\n      disabled={!ready || loading}\n      onMouseUp={toggleMic}\n      type=\"primary\"\n      shape=\"round\"\n      size=\"large\"\n    >\n      Speak\n    </Button>\n  );\n};\n\nexport default Microphone;\n","import { Duplex, DuplexOptions } from \"readable-stream\";\nimport { KaldiRecognizer } from \"vosk-browser\";\n\nexport class AudioStreamer extends Duplex {\n  constructor(public recognizer: KaldiRecognizer, options?: DuplexOptions) {\n    super(options);\n  }\n\n  public _write(chunk: AudioBuffer, encoding: any, callback: any) {\n    const buffer = chunk.getChannelData(0);\n    if (this.recognizer && buffer.byteLength > 0) {\n      this.recognizer.acceptWaveform(chunk);\n    }\n    callback();\n  }\n}\n","import { Writable } from \"readable-stream\";\n\nexport const audioBucket = new Writable({\n  write: function (chunk, encoding, callback) {\n    callback();\n  },\n  objectMode: true,\n  decodeStrings: false,\n});\n","import { Button, Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst { Option } = Select;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst StyledButton = styled(Button)`\n  box-sizing: border-box;\n  margin-left: 1.5rem;\n  font-size: 1.1em;\n  border: 1px solid darkorange;\n`;\ninterface Props {\n  onModelChange: (value: string) => void;\n  onModelSelect: (value: string) => void;\n  loading: boolean;\n  loaded: boolean;\n}\n\nexport const models: Array<{ name: string; path: string }> = [\n  {\n    name: \"Bangla ASR Model\",\n    path: \"bangla_model.tar.gz\",\n  },\n  {\n    name: \"Indian English Model\",\n    path: \"vosk-model-small-en-in-0.4.tar.gz\",\n  }\n];\n\nconst ModelLoader: React.FunctionComponent<Props> = ({\n  onModelChange,\n  onModelSelect,\n  loading,\n  loaded,\n}) => {\n  const [model, setModel] = useState(models[0].path);\n\n  return (\n    <Wrapper>\n      <Select\n        style={{\n          height: \"2rem\",\n          margin: \"auto 0\",\n          width: \"10rem\",\n\n        }}\n        defaultValue={models[0].path}\n        onChange={(value: string) => {\n          onModelChange(value);\n          setModel(value);\n        }}\n      >\n        {models.map((model, index) => (\n          <Option value={model.path} key={index}>\n            {model.name}\n          </Option>\n        ))}\n      </Select>\n      <StyledButton onClick={() => onModelSelect(model)}>\n        {loading ? \"L o a d i n g . . .\" : \"Load\"}\n      </StyledButton>\n    </Wrapper>\n  );\n};\n\nexport default ModelLoader;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Select } from \"antd\";\nimport { createModel, KaldiRecognizer, Model } from \"vosk-browser\";\nimport FileUpload from \"./file-upload\";\nimport Microphone from \"./microphone\";\nimport ModelLoader from \"./model-loader\";\n\n//<FileUpload recognizer={recognizer} loading={loading} ready={ready} />\n\n\nconst Wrapper = styled.div`\n  width: 80%;\n  text-align: left;\n  max-width: 700px;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 1rem auto;\n`;\n\nconst StyledButton = styled(Button)`\n  box-sizing: border-box;\n  margin-left: 1.5rem;\n  font-size: 1.1em;\n  border: 1px solid darkorange;\n`;\n\nconst ResultContainer = styled.div`\n  width: 100%;\n  height: 300px;\n  margin: 1rem auto;\n  border: 1px solid #aaaaaa;\n  padding: 1rem;\n  resize: vertical;\n  overflow: auto;\n`;\n\nconst Word = styled.span<{ confidence: number }>`\n  color: ${({ confidence }) => {\n    const color = Math.max(255 * (1 - confidence) - 20, 0);\n    return `rgb(${color},${color},${color})`;\n  }};\n  white-space: normal;\n`;\n\ninterface VoskResult {\n  result: Array<{\n    conf: number;\n    start: number;\n    end: number;\n    word: string;\n  }>;\n  text: string;\n}\n\nconst modelMap = new Map<string, { model: Model; path: string }>();\n\nexport const Recognizer: React.FunctionComponent = () => {\n  const [utterances, setUtterances] = useState<VoskResult[]>([]);\n  const [partial, setPartial] = useState(\"\");\n  const [loadedModel, setLoadedModel] = useState<{\n    model: Model;\n    path: string;\n  }>();\n  const [recognizer, setRecognizer] = useState<KaldiRecognizer>();\n  const [loading, setLoading] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  const loadModel = async (path: string) => {\n    setLoading(true);\n    loadedModel?.model.terminate();\n\n    const model = await createModel(process.env.PUBLIC_URL + \"/models/\" + path);\n\n    setLoadedModel({ model, path });\n    const recognizer = new model.KaldiRecognizer();\n    recognizer.on(\"result\", (message: any) => {\n      const result: VoskResult = message.result;\n      setUtterances((utt: VoskResult[]) => [...utt, result]);\n    });\n\n    recognizer.on(\"partialresult\", (message: any) => {\n      setPartial(message.result.partial);\n    });\n\n    setRecognizer(() => {\n      setLoading(false);\n      setReady(true);\n      return recognizer;\n    });\n  };\n\n\n  return (\n    <Wrapper>\n      <ModelLoader\n        onModelChange={(path) => setReady(loadedModel?.path === path)}\n        onModelSelect={(path) => {\n          if (loadedModel?.path !== path) {\n            loadModel(path);\n          }\n        }}\n        loading={loading}\n      />\n      <Header>\n        <Microphone recognizer={recognizer} loading={loading} ready={ready} />\n      </Header>\n      <ResultContainer>\n        {utterances.map((utt, uindex) =>\n          utt?.result?.map((word, windex) => (\n            <Word\n              key={`${uindex}-${windex}`}\n              confidence={word.conf}\n              title={`Confidence: ${(word.conf * 100).toFixed(2)}%`}\n            >\n              {word.word}{\" \"}\n            </Word>\n          ))\n        )}\n        <span key=\"partial\">{partial}</span>\n      </ResultContainer>\n\n    </Wrapper>\n  );\n};\n","import \"antd/dist/antd.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\n\nimport \"./index.css\";\n\nimport { Recognizer } from \"./recognizer\";\n\nconst Wrapper = styled.div`\n  text-align: center;\n  margin: auto;\n  justify-content: center;\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper>\n      <h1>ASR BANGLA</h1>\n      <h2>An Automatic Speech Recognition System for Bangla Language</h2>\n      <h3>\n        Select a language and load the model to start speech recognition.\n      </h3>\n      <p>\n              <br/>\n      </p>\n      <Recognizer />\n      <p>\n        <br /><br /><br />\n        <a href=\"https://www.linkedin.com/in/rez1-talukder\" >\n          ASR Bangla @ Md Rezowan Talukder\n        </a>\n      </p>\n    </Wrapper>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}